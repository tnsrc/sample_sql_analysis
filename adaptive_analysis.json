{
  "strategy": "hybrid",
  "config": {
    "target_chunk_size": 60,
    "max_chunk_size": 120,
    "min_chunk_size": 10,
    "force_subdivision_threshold": 200
  },
  "chunks": [
    {
      "chunk_id": 1,
      "title": "General Business Logic (Math:PI/CREATE)",
      "lines": [
        "-- =====================================================================================",
        "-- MEGA STORED PROCEDURE - Combined E-commerce System",
        "-- Combines all stored procedures into one massive procedure for testing",
        "-- Lines: 6000+ (All business logic combined)",
        "-- =====================================================================================",
        "",
        "CREATE PROCEDURE sp_MegaEcommerceProcessor",
        "    @CustomerID INT,",
        "    @OrderDate DATETIME,",
        "    @ShippingAddressID INT,",
        "    @PaymentMethodID INT,",
        "    @CartItems NVARCHAR(MAX), -- JSON array of items",
        "    @PromoCode NVARCHAR(50),",
        "    @ShippingMethodID INT = 1,",
        "    @IsRushOrder BIT = 0,",
        "    @ProcessInventory BIT = 1,",
        "    @ProcessPayment BIT = 1,",
        "    @ProcessNotifications BIT = 1,",
        "    @ProcessRecommendations BIT = 1,",
        "    @ProcessLoyalty BIT = 1,",
        "    @ProcessReports BIT = 1,",
        "    @OrderID INT OUTPUT,",
        "    @TotalAmount DECIMAL(18,2) OUTPUT,",
        "    @ErrorMessage NVARCHAR(1000) OUTPUT,",
        "    @WarningMessages NVARCHAR(MAX) OUTPUT",
        "AS"
      ],
      "start_line": 1,
      "end_line": 26,
      "chunk_type": "general_logic",
      "complexity_score": 3,
      "sql_operations": [
        "Math:PI",
        "CREATE"
      ],
      "variables_declared": [],
      "variables_used": [
        "@ShippingAddressID",
        "@CartItems",
        "@OrderDate",
        "@CustomerID",
        "@PaymentMethodID",
        "@ProcessInventory",
        "@ProcessReports",
        "@ProcessRecommendations",
        "@ProcessPayment",
        "@IsRushOrder",
        "@ShippingMethodID",
        "@ProcessNotifications",
        "@PromoCode",
        "@WarningMessages",
        "@ProcessLoyalty",
        "@ErrorMessage",
        "@OrderID",
        "@TotalAmount"
      ],
      "tables_accessed": [],
      "control_structures": [],
      "dependencies": [],
      "context_summary": "Performs math:pi, create operations",
      "business_functions": []
    },
    {
      "chunk_id": 2,
      "title": "General Business Logic (BEGIN)",
      "lines": [
        "BEGIN",
        "    SET NOCOUNT ON;",
        "    SET XACT_ABORT ON;",
        "    ",
        "    -- =====================================================================================",
        "    -- MASSIVE VARIABLE DECLARATION SECTION",
        "    -- =====================================================================================",
        "    ",
        "    -- Core order variables"
      ],
      "start_line": 27,
      "end_line": 35,
      "chunk_type": "general_logic",
      "complexity_score": 2,
      "sql_operations": [],
      "variables_declared": [],
      "variables_used": [],
      "tables_accessed": [],
      "control_structures": [
        "BEGIN"
      ],
      "dependencies": [],
      "context_summary": "Uses begin logic. Follows general logic",
      "business_functions": []
    },
    {
      "chunk_id": 3,
      "title": "Variable & Parameter Declarations (Math:PI/System:GETDATE) (Part 1)",
      "lines": [
        "    DECLARE @SubtotalAmount DECIMAL(18,2) = 0;",
        "    DECLARE @DiscountAmount DECIMAL(18,2) = 0;",
        "    DECLARE @TaxAmount DECIMAL(18,2) = 0;",
        "    DECLARE @ShippingCost DECIMAL(18,2) = 0;",
        "    DECLARE @ProcessingFee DECIMAL(18,2) = 0;",
        "    DECLARE @FinalAmount DECIMAL(18,2) = 0;",
        "    DECLARE @OrderStatusID INT = 1; -- Pending",
        "    DECLARE @IsValid BIT = 1;",
        "    DECLARE @ErrorCode INT = 0;",
        "    DECLARE @WarningCode INT = 0;",
        "    ",
        "    -- Customer and product processing",
        "    DECLARE @CurrentItem INT = 1;",
        "    DECLARE @ItemCount INT = 0;",
        "    DECLARE @ProductID INT;",
        "    DECLARE @Quantity INT;",
        "    DECLARE @UnitPrice DECIMAL(18,2);",
        "    DECLARE @AvailableStock INT;",
        "    DECLARE @ReservedStock INT;",
        "    DECLARE @BackorderQuantity INT = 0;",
        "    DECLARE @ProductWeight DECIMAL(10,2);",
        "    DECLARE @ProductVolume DECIMAL(10,2);",
        "    DECLARE @TotalWeight DECIMAL(10,2) = 0;",
        "    DECLARE @TotalVolume DECIMAL(10,2) = 0;",
        "    ",
        "    -- Promotion and discount handling",
        "    DECLARE @DiscountPercentage DECIMAL(5,2) = 0;",
        "    DECLARE @MaxDiscount DECIMAL(18,2);",
        "    DECLARE @PromoID INT;",
        "    DECLARE @PromoStartDate DATETIME;",
        "    DECLARE @PromoEndDate DATETIME;",
        "    DECLARE @PromoUsageCount INT = 0;",
        "    DECLARE @PromoMaxUsage INT;",
        "    DECLARE @CustomerPromoUsage INT = 0;",
        "    DECLARE @IsPromoStackable BIT = 0;",
        "    ",
        "    -- Customer analysis and segmentation",
        "    DECLARE @CustomerTypeID INT;",
        "    DECLARE @CustomerTierID INT;",
        "    DECLARE @CustomerOrderCount INT = 0;",
        "    DECLARE @CustomerLifetimeValue DECIMAL(18,2) = 0;",
        "    DECLARE @CustomerLastOrderDate DATETIME;",
        "    DECLARE @CustomerRiskScore INT = 0;",
        "    DECLARE @CustomerCreditLimit DECIMAL(18,2) = 0;",
        "    DECLARE @CustomerCurrentBalance DECIMAL(18,2) = 0;",
        "    DECLARE @CustomerPriorityLevel INT = 3; -- Default: Regular",
        "    ",
        "    -- Address and shipping",
        "    DECLARE @ShippingStateID INT;",
        "    DECLARE @ShippingCountryID INT;",
        "    DECLARE @ShippingZoneID INT;",
        "    DECLARE @ShippingDistance INT = 0;",
        "    DECLARE @EstimatedDeliveryDays INT = 5;",
        "    DECLARE @ShippingTrackingNumber NVARCHAR(50);",
        "    ",
        "    -- Tax calculation variables",
        "    DECLARE @StateTaxRate DECIMAL(8,4) = 0;",
        "    DECLARE @LocalTaxRate DECIMAL(8,4) = 0;",
        "    DECLARE @CalculatedTaxRate DECIMAL(8,4) = 0;",
        "    DECLARE @IsTaxExempt BIT = 0;",
        "    ",
        "    -- Payment processing",
        "    DECLARE @PaymentTypeID INT;",
        "    DECLARE @PaymentStatusID INT = 1; -- Pending",
        "    DECLARE @PaymentReferenceNumber NVARCHAR(100);",
        "    DECLARE @PaymentFee DECIMAL(18,2) = 0;",
        "    DECLARE @PaymentAuthCode NVARCHAR(50);",
        "    DECLARE @IsPaymentPreAuth BIT = 0;",
        "    ",
        "    -- Inventory and warehouse management",
        "    DECLARE @WarehouseID INT;",
        "    DECLARE @PrimaryWarehouseID INT;",
        "    DECLARE @InventoryReservationID INT;",
        "    DECLARE @RequiresInventoryAllocation BIT = 0;",
        "    DECLARE @InventoryShortfall INT = 0;",
        "    ",
        "    -- Loyalty and rewards",
        "    DECLARE @LoyaltyPoints INT = 0;",
        "    DECLARE @LoyaltyPointsEarned INT = 0;",
        "    DECLARE @LoyaltyTierMultiplier DECIMAL(4,2) = 1.0;",
        "    DECLARE @RewardsCashback DECIMAL(18,2) = 0;",
        "    ",
        "    -- Transaction and logging",
        "    DECLARE @TransactionID INT;",
        "    DECLARE @OrderProcessingStartTime DATETIME = GETDATE();",
        "    DECLARE @AuditLogID INT;",
        "    DECLARE @NotificationID INT;",
        "    ",
        "    -- Recommendations and analytics",
        "    DECLARE @RecommendationSetID INT;",
        "    DECLARE @CustomerBehaviorScore INT = 0;",
        "    DECLARE @CrossSellOpportunities INT = 0;",
        "    DECLARE @UpSellValue DECIMAL(18,2) = 0;",
        "    ",
        "    -- Temporary tables for complex processing",
        "    DECLARE @Cart TABLE (",
        "        RowNum INT IDENTITY(1,1) PRIMARY KEY,",
        "        ProductID INT NOT NULL,",
        "        Quantity INT NOT NULL,",
        "        UnitPrice DECIMAL(18,2),",
        "        LineTotal DECIMAL(18,2),",
        "        Weight DECIMAL(10,2),",
        "        Volume DECIMAL(10,2),",
        "        CategoryID INT,",
        "        IsDigital BIT DEFAULT 0,",
        "        WarehouseID INT,",
        "        EstimatedShippingDays INT,",
        "        ReservationID INT,",
        "        TaxRate DECIMAL(8,4),",
        "        LineTaxAmount DECIMAL(18,2)",
        "    );",
        "    ",
        "    DECLARE @InventoryAllocations TABLE (",
        "        ProductID INT,",
        "        WarehouseID INT,",
        "        AllocatedQuantity INT,",
        "        ReservationID INT,",
        "        EstimatedShippingDays INT,",
        "        AllocationPriority INT,",
        "        CostPerUnit DECIMAL(10,2)",
        "    );",
        "    ",
        "    DECLARE @AppliedPromotions TABLE (",
        "        PromoID INT,",
        "        PromoType NVARCHAR(50),",
        "        DiscountAmount DECIMAL(18,2),",
        "        DiscountPercentage DECIMAL(5,2),",
        "        AppliedToProductID INT,",
        "        IsStackable BIT",
        "    );",
        "    ",
        "    DECLARE @TaxCalculations TABLE (",
        "        ProductID INT,",
        "        TaxRate DECIMAL(8,4),",
        "        TaxAmount DECIMAL(18,2),",
        "        TaxType NVARCHAR(50),",
        "        JurisdictionID INT",
        "    );",
        "    "
      ],
      "start_line": 36,
      "end_line": 174,
      "chunk_type": "variable_declaration",
      "complexity_score": 9,
      "sql_operations": [
        "Math:PI",
        "System:GETDATE"
      ],
      "variables_declared": [
        "@ISVALID",
        "@AVAILABLESTOCK",
        "@REQUIRESINVENTORYALLOCATION",
        "@CUSTOMERBEHAVIORSCORE",
        "@CUSTOMERLASTORDERDATE",
        "@DISCOUNTPERCENTAGE",
        "@REWARDSCASHBACK",
        "@CUSTOMERCURRENTBALANCE",
        "@TAXAMOUNT",
        "@PROMOID",
        "@PROCESSINGFEE",
        "@NOTIFICATIONID",
        "@CUSTOMERTYPEID",
        "@PROMOENDDATE",
        "@ISPROMOSTACKABLE",
        "@PAYMENTTYPEID",
        "@RESERVEDSTOCK",
        "@ITEMCOUNT",
        "@RECOMMENDATIONSETID",
        "@CUSTOMERCREDITLIMIT",
        "@TOTALWEIGHT",
        "@LOYALTYPOINTSEARNED",
        "@UPSELLVALUE",
        "@CUSTOMERORDERCOUNT",
        "@QUANTITY",
        "@WAREHOUSEID",
        "@LOYALTYPOINTS",
        "@ISPAYMENTPREAUTH",
        "@UNITPRICE",
        "@SHIPPINGCOST",
        "@SHIPPINGSTATEID",
        "@CUSTOMERPRIORITYLEVEL",
        "@DISCOUNTAMOUNT",
        "@CURRENTITEM",
        "@WARNINGCODE",
        "@CART",
        "@ERRORCODE",
        "@PROMOSTARTDATE",
        "@FINALAMOUNT",
        "@TRANSACTIONID",
        "@ESTIMATEDDELIVERYDAYS",
        "@INVENTORYSHORTFALL",
        "@TAXCALCULATIONS",
        "@SHIPPINGDISTANCE",
        "@CUSTOMERTIERID",
        "@SHIPPINGZONEID",
        "@STATETAXRATE",
        "@CUSTOMERPROMOUSAGE",
        "@PAYMENTSTATUSID",
        "@PAYMENTFEE",
        "@CUSTOMERLIFETIMEVALUE",
        "@MAXDISCOUNT",
        "@BACKORDERQUANTITY",
        "@PRODUCTVOLUME",
        "@PROMOUSAGECOUNT",
        "@PAYMENTREFERENCENUMBER",
        "@ORDERSTATUSID",
        "@PRIMARYWAREHOUSEID",
        "@ORDERPROCESSINGSTARTTIME",
        "@ISTAXEXEMPT",
        "@PROMOMAXUSAGE",
        "@CALCULATEDTAXRATE",
        "@PAYMENTAUTHCODE",
        "@CROSSSELLOPPORTUNITIES",
        "@INVENTORYALLOCATIONS",
        "@AUDITLOGID",
        "@SUBTOTALAMOUNT",
        "@LOCALTAXRATE",
        "@PRODUCTWEIGHT",
        "@LOYALTYTIERMULTIPLIER",
        "@CUSTOMERRISKSCORE",
        "@SHIPPINGCOUNTRYID",
        "@APPLIEDPROMOTIONS",
        "@INVENTORYRESERVATIONID",
        "@SHIPPINGTRACKINGNUMBER",
        "@TOTALVOLUME",
        "@PRODUCTID"
      ],
      "variables_used": [
        "@PaymentFee",
        "@ProcessingFee",
        "@TotalWeight",
        "@TaxAmount",
        "@CustomerTierID",
        "@AuditLogID",
        "@FinalAmount",
        "@CustomerTypeID",
        "@CustomerRiskScore",
        "@UnitPrice",
        "@PromoMaxUsage",
        "@LoyaltyPoints",
        "@IsTaxExempt",
        "@LoyaltyPointsEarned",
        "@CrossSellOpportunities",
        "@ProductWeight",
        "@InventoryAllocations",
        "@CalculatedTaxRate",
        "@PromoEndDate",
        "@IsValid",
        "@ShippingStateID",
        "@CustomerOrderCount",
        "@Quantity",
        "@TaxCalculations",
        "@AvailableStock",
        "@TotalVolume",
        "@TransactionID",
        "@CustomerLastOrderDate",
        "@CustomerLifetimeValue",
        "@PromoStartDate",
        "@StateTaxRate",
        "@LoyaltyTierMultiplier",
        "@DiscountPercentage",
        "@ShippingZoneID",
        "@AppliedPromotions",
        "@WarningCode",
        "@Cart",
        "@ErrorCode",
        "@OrderStatusID",
        "@ShippingCountryID",
        "@InventoryShortfall",
        "@PaymentReferenceNumber",
        "@LocalTaxRate",
        "@NotificationID",
        "@EstimatedDeliveryDays",
        "@PaymentTypeID",
        "@CustomerCurrentBalance",
        "@PromoUsageCount",
        "@RecommendationSetID",
        "@UpSellValue",
        "@MaxDiscount",
        "@ShippingCost",
        "@IsPromoStackable",
        "@RequiresInventoryAllocation",
        "@CustomerBehaviorScore",
        "@ShippingTrackingNumber",
        "@CurrentItem",
        "@BackorderQuantity",
        "@PrimaryWarehouseID",
        "@DiscountAmount",
        "@ShippingDistance",
        "@CustomerCreditLimit",
        "@ItemCount",
        "@ProductVolume",
        "@CustomerPromoUsage",
        "@PaymentStatusID",
        "@IsPaymentPreAuth",
        "@InventoryReservationID",
        "@OrderProcessingStartTime",
        "@RewardsCashback",
        "@ReservedStock",
        "@WarehouseID",
        "@SubtotalAmount",
        "@PromoID",
        "@ProductID",
        "@PaymentAuthCode",
        "@CustomerPriorityLevel"
      ],
      "tables_accessed": [],
      "control_structures": [],
      "dependencies": [],
      "context_summary": "Performs math:pi, system:getdate operations. Follows general logic",
      "business_functions": [],
      "sub_chunk_info": {
        "parent_block_type": "variable_declaration",
        "parent_block_start": 36,
        "parent_block_end": 178,
        "sub_chunk_index": 1,
        "total_sub_chunks": 3,
        "subdivision_reason": "Size optimization"
      }
    },
    {
      "chunk_id": 4,
      "title": "Transaction Control (System:GETDATE/Math:PI) (Part 1)",
      "lines": [
        "    BEGIN TRY",
        "        BEGIN TRANSACTION;",
        "        ",
        "        -- Initialize warning messages",
        "        SET @WarningMessages = '';",
        "        ",
        "        -- Validate customer information",
        "        IF @CustomerID IS NULL OR @CustomerID <= 0",
        "        BEGIN",
        "            SET @IsValid = 0;",
        "            SET @ErrorMessage = 'Invalid Customer ID provided.';",
        "            SET @ErrorCode = 1001;",
        "            GOTO ErrorHandler;",
        "        END;",
        "        ",
        "        IF @OrderDate IS NULL OR @OrderDate > GETDATE()",
        "        BEGIN",
        "            SET @IsValid = 0;",
        "            SET @ErrorMessage = 'Invalid order date. Cannot be future date.';",
        "            SET @ErrorCode = 1002;",
        "            GOTO ErrorHandler;",
        "        END;",
        "        ",
        "        IF @ShippingAddressID IS NULL OR @ShippingAddressID <= 0",
        "        BEGIN",
        "            SET @IsValid = 0;",
        "            SET @ErrorMessage = 'Invalid shipping address ID.';",
        "            SET @ErrorCode = 1003;",
        "            GOTO ErrorHandler;",
        "        END;",
        "        ",
        "        IF @PaymentMethodID IS NULL OR @PaymentMethodID <= 0",
        "        BEGIN",
        "            SET @IsValid = 0;",
        "            SET @ErrorMessage = 'Invalid payment method ID.';",
        "            SET @ErrorCode = 1004;",
        "            GOTO ErrorHandler;",
        "        END;",
        "        ",
        "        IF @CartItems IS NULL OR LEN(@CartItems) = 0",
        "        BEGIN",
        "            SET @IsValid = 0;",
        "            SET @ErrorMessage = 'Cart items cannot be empty.';",
        "            SET @ErrorCode = 1005;",
        "            GOTO ErrorHandler;",
        "        END;",
        "        "
      ],
      "start_line": 179,
      "end_line": 225,
      "chunk_type": "transaction_control",
      "complexity_score": 31,
      "sql_operations": [
        "System:GETDATE",
        "Math:PI",
        "String:LEN"
      ],
      "variables_declared": [],
      "variables_used": [
        "@ShippingAddressID",
        "@ErrorCode",
        "@CartItems",
        "@IsValid",
        "@CustomerID",
        "@OrderDate",
        "@PaymentMethodID",
        "@WarningMessages",
        "@ErrorMessage"
      ],
      "tables_accessed": [],
      "control_structures": [
        "END",
        "TRY",
        "BEGIN",
        "GOTO",
        "IF"
      ],
      "dependencies": [],
      "context_summary": "Performs system:getdate, math:pi, string:len operations. Uses end, try, begin, goto, if logic. Follows variable declaration",
      "business_functions": [],
      "sub_chunk_info": {
        "parent_block_type": "variable_declaration",
        "parent_block_start": 179,
        "parent_block_end": 1189,
        "sub_chunk_index": 1,
        "total_sub_chunks": 43,
        "subdivision_reason": "Size optimization"
      }
    },
    {
      "chunk_id": 5,
      "title": "Conditional Logic & Branching (Conversion:ISNULL/Logical:NOT EXISTS) (Part 3)",
      "lines": [
        "        -- =====================================================================================",
        "        ",
        "        -- Comprehensive customer validation",
        "        IF NOT EXISTS (SELECT 1 FROM Customers WHERE CustomerID = @CustomerID AND IsActive = 1)",
        "        BEGIN",
        "            SET @IsValid = 0;",
        "            SET @ErrorMessage = 'Customer does not exist or is inactive.';",
        "            SET @ErrorCode = 2001;",
        "            GOTO ErrorHandler;",
        "        END;",
        "        ",
        "        -- Retrieve detailed customer information",
        "        SELECT ",
        "            @CustomerTypeID = CustomerTypeID,",
        "            @CustomerTierID = CustomerTierID,",
        "            @CustomerCreditLimit = CreditLimit,",
        "            @CustomerCurrentBalance = CurrentBalance,",
        "            @CustomerRiskScore = RiskScore,",
        "            @CustomerLastOrderDate = LastOrderDate,",
        "            @IsTaxExempt = IsTaxExempt",
        "        FROM Customers ",
        "        WHERE CustomerID = @CustomerID;",
        "        ",
        "        -- Calculate customer priority level",
        "        SET @CustomerPriorityLevel = CASE ",
        "            WHEN @CustomerTypeID = 1 THEN 1  -- Platinum",
        "            WHEN @CustomerTypeID = 2 THEN 2  -- Gold  ",
        "            WHEN @CustomerTypeID = 3 THEN 3  -- Silver",
        "            ELSE 4                           -- Regular",
        "        END;",
        "        ",
        "        -- Get customer order history and analytics",
        "        SELECT ",
        "            @CustomerOrderCount = COUNT(*),",
        "            @CustomerLifetimeValue = ISNULL(SUM(FinalAmount), 0)",
        "        FROM Orders ",
        "        WHERE CustomerID = @CustomerID ",
        "          AND OrderStatusID IN (2, 3, 4); -- Completed, Shipped, Delivered",
        "        ",
        "        -- Customer credit validation",
        "        IF @CustomerCurrentBalance > @CustomerCreditLimit * 0.9",
        "        BEGIN",
        "            SET @WarningMessages = @WarningMessages + 'Customer near credit limit. ';",
        "            SET @WarningCode = 2001;",
        "        END;",
        "        ",
        "        -- Risk assessment",
        "        IF @CustomerRiskScore > 700",
        "        BEGIN",
        "            SET @WarningMessages = @WarningMessages + 'High-risk customer detected. ';",
        "            SET @WarningCode = 2002;",
        "        END;",
        "        "
      ],
      "start_line": 228,
      "end_line": 280,
      "chunk_type": "conditional_logic",
      "complexity_score": 21,
      "sql_operations": [
        "Conversion:ISNULL",
        "Logical:NOT EXISTS",
        "Aggregate:SUM",
        "Aggregate:COUNT",
        "SELECT"
      ],
      "variables_declared": [],
      "variables_used": [
        "@CustomerTypeID",
        "@CustomerRiskScore",
        "@ErrorCode",
        "@CustomerLifetimeValue",
        "@IsValid",
        "@CustomerID",
        "@WarningMessages",
        "@CustomerCurrentBalance",
        "@CustomerOrderCount",
        "@CustomerPriorityLevel",
        "@WarningCode",
        "@CustomerLastOrderDate",
        "@CustomerTierID",
        "@ErrorMessage",
        "@CustomerCreditLimit",
        "@IsTaxExempt"
      ],
      "tables_accessed": [
        "ORDERS",
        "CUSTOMERS"
      ],
      "control_structures": [
        "END",
        "ELSE",
        "WHEN",
        "BEGIN",
        "CASE",
        "GOTO",
        "IF"
      ],
      "dependencies": [],
      "context_summary": "Performs conversion:isnull, logical:not exists, aggregate:sum, aggregate:count, select operations. Uses end, else, when, begin, case, goto, if logic. Follows transaction control",
      "business_functions": [],
      "sub_chunk_info": {
        "parent_block_type": "variable_declaration",
        "parent_block_start": 179,
        "parent_block_end": 1189,
        "sub_chunk_index": 3,
        "total_sub_chunks": 43,
        "subdivision_reason": "Size optimization"
      }
    },
    {
      "chunk_id": 6,
      "title": "Conditional Logic & Branching (SELECT/Math:PI) (Part 5)",
      "lines": [
        "        -- =====================================================================================",
        "        ",
        "        -- Validate shipping address belongs to customer",
        "        IF NOT EXISTS (",
        "            SELECT 1 FROM Addresses ",
        "            WHERE AddressID = @ShippingAddressID ",
        "              AND CustomerID = @CustomerID ",
        "              AND IsActive = 1",
        "        )",
        "        BEGIN",
        "            SET @IsValid = 0;",
        "            SET @ErrorMessage = 'Shipping address does not belong to customer or is inactive.';",
        "            SET @ErrorCode = 3001;",
        "            GOTO ErrorHandler;",
        "        END;",
        "        ",
        "        -- Get shipping location details",
        "        SELECT ",
        "            @ShippingStateID = StateID,",
        "            @ShippingCountryID = CountryID,",
        "            @ShippingZoneID = ShippingZoneID",
        "        FROM Addresses ",
        "        WHERE AddressID = @ShippingAddressID;",
        "        ",
        "        -- Validate shipping method",
        "        IF NOT EXISTS (",
        "            SELECT 1 FROM ShippingMethods ",
        "            WHERE MethodID = @ShippingMethodID ",
        "              AND IsActive = 1",
        "        )",
        "        BEGIN",
        "            SET @IsValid = 0;",
        "            SET @ErrorMessage = 'Invalid or inactive shipping method.';",
        "            SET @ErrorCode = 3002;",
        "            GOTO ErrorHandler;",
        "        END;",
        "        ",
        "        -- Check if shipping method is available to destination",
        "        IF NOT EXISTS (",
        "            SELECT 1 FROM ShippingMethodZones smz",
        "            INNER JOIN ShippingMethods sm ON smz.MethodID = sm.MethodID",
        "            WHERE smz.MethodID = @ShippingMethodID ",
        "              AND smz.ZoneID = @ShippingZoneID",
        "              AND sm.IsActive = 1",
        "        )",
        "        BEGIN",
        "            SET @IsValid = 0;",
        "            SET @ErrorMessage = 'Shipping method not available to destination.';",
        "            SET @ErrorCode = 3003;",
        "            GOTO ErrorHandler;",
        "        END;",
        "        "
      ],
      "start_line": 283,
      "end_line": 334,
      "chunk_type": "conditional_logic",
      "complexity_score": 34,
      "sql_operations": [
        "SELECT",
        "Math:PI",
        "Logical:NOT EXISTS"
      ],
      "variables_declared": [],
      "variables_used": [
        "@ShippingAddressID",
        "@ErrorCode",
        "@IsValid",
        "@CustomerID",
        "@ShippingStateID",
        "@ShippingCountryID",
        "@ShippingMethodID",
        "@ErrorMessage",
        "@ShippingZoneID"
      ],
      "tables_accessed": [
        "ADDRESSES",
        "SHIPPINGMETHODZONES",
        "SHIPPINGMETHODS"
      ],
      "control_structures": [
        "IF",
        "END",
        "GOTO",
        "BEGIN"
      ],
      "dependencies": [],
      "context_summary": "Performs select, math:pi, logical:not exists operations. Uses if, end, goto, begin logic. Follows conditional logic",
      "business_functions": [],
      "sub_chunk_info": {
        "parent_block_type": "variable_declaration",
        "parent_block_start": 179,
        "parent_block_end": 1189,
        "sub_chunk_index": 5,
        "total_sub_chunks": 43,
        "subdivision_reason": "Size optimization"
      }
    },
    {
      "chunk_id": 7,
      "title": "Loop Processing & Iteration (SELECT/Math:PI) (Part 7)",
      "lines": [
        "        -- =====================================================================================",
        "        ",
        "        -- Validate payment method",
        "        IF NOT EXISTS (",
        "            SELECT 1 FROM PaymentMethods ",
        "            WHERE PaymentMethodID = @PaymentMethodID ",
        "              AND IsActive = 1",
        "        )",
        "        BEGIN",
        "            SET @IsValid = 0;",
        "            SET @ErrorMessage = 'Invalid or inactive payment method.';",
        "            SET @ErrorCode = 4001;",
        "            GOTO ErrorHandler;",
        "        END;",
        "        ",
        "        -- Get payment method details",
        "        SELECT ",
        "            @PaymentTypeID = PaymentTypeID,",
        "            @PaymentFee = ProcessingFee,",
        "            @IsPaymentPreAuth = RequiresPreAuth",
        "        FROM PaymentMethods ",
        "        WHERE PaymentMethodID = @PaymentMethodID;",
        "        ",
        "        -- Validate payment method for customer",
        "        IF NOT EXISTS (",
        "            SELECT 1 FROM CustomerPaymentMethods ",
        "            WHERE CustomerID = @CustomerID ",
        "              AND PaymentMethodID = @PaymentMethodID ",
        "              AND IsActive = 1",
        "              AND ExpiryDate > GETDATE()",
        "        )",
        "        BEGIN",
        "            SET @IsValid = 0;",
        "            SET @ErrorMessage = 'Payment method not valid for customer or expired.';",
        "            SET @ErrorCode = 4002;",
        "            GOTO ErrorHandler;",
        "        END;",
        "        "
      ],
      "start_line": 337,
      "end_line": 374,
      "chunk_type": "loop_logic",
      "complexity_score": 16,
      "sql_operations": [
        "SELECT",
        "Math:PI",
        "Logical:NOT EXISTS",
        "System:GETDATE"
      ],
      "variables_declared": [],
      "variables_used": [
        "@ErrorCode",
        "@IsValid",
        "@CustomerID",
        "@PaymentMethodID",
        "@PaymentTypeID",
        "@PaymentFee",
        "@IsPaymentPreAuth",
        "@ErrorMessage"
      ],
      "tables_accessed": [
        "CUSTOMERPAYMENTMETHODS",
        "PAYMENTMETHODS"
      ],
      "control_structures": [
        "END",
        "BEGIN",
        "FOR",
        "GOTO",
        "IF"
      ],
      "dependencies": [],
      "context_summary": "Performs select, math:pi, logical:not exists, system:getdate operations. Uses end, begin, for, goto, if logic. Follows conditional logic",
      "business_functions": [],
      "sub_chunk_info": {
        "parent_block_type": "variable_declaration",
        "parent_block_start": 179,
        "parent_block_end": 1189,
        "sub_chunk_index": 7,
        "total_sub_chunks": 43,
        "subdivision_reason": "Size optimization"
      }
    },
    {
      "chunk_id": 8,
      "title": "Loop Processing & Iteration (Logical:EXISTS/Logical:NOT EXISTS) (Part 9)",
      "lines": [
        "        -- =====================================================================================",
        "        ",
        "        -- Parse and validate cart items from JSON",
        "        INSERT INTO @Cart (ProductID, Quantity)",
        "        SELECT ",
        "            JSON_VALUE(value, '$.ProductID'),",
        "            JSON_VALUE(value, '$.Quantity')",
        "        FROM OPENJSON(@CartItems);",
        "        ",
        "        -- Validate cart has items",
        "        SET @ItemCount = (SELECT COUNT(*) FROM @Cart);",
        "        IF @ItemCount = 0",
        "        BEGIN",
        "            SET @IsValid = 0;",
        "            SET @ErrorMessage = 'Cart is empty after parsing JSON.';",
        "            SET @ErrorCode = 5001;",
        "            GOTO ErrorHandler;",
        "        END;",
        "        ",
        "        -- Process each cart item with comprehensive validation",
        "        WHILE @CurrentItem <= @ItemCount",
        "        BEGIN",
        "            SELECT ",
        "                @ProductID = ProductID,",
        "                @Quantity = Quantity",
        "            FROM @Cart",
        "            WHERE RowNum = @CurrentItem;",
        "            ",
        "            -- Validate product exists and is active",
        "            IF NOT EXISTS (",
        "                SELECT 1 FROM Products ",
        "                WHERE ProductID = @ProductID ",
        "                  AND IsActive = 1 ",
        "                  AND IsDiscontinued = 0",
        "            )",
        "            BEGIN",
        "                SET @IsValid = 0;",
        "                SET @ErrorMessage = 'Product ID ' + CAST(@ProductID AS NVARCHAR(10)) + ' does not exist, is inactive, or discontinued.';",
        "                SET @ErrorCode = 5002;",
        "                GOTO ErrorHandler;",
        "            END;",
        "            ",
        "            -- Get comprehensive product information",
        "            SELECT ",
        "                @AvailableStock = StockQuantity,",
        "                @UnitPrice = UnitPrice,",
        "                @ProductWeight = Weight,",
        "                @ProductVolume = Volume",
        "            FROM Products",
        "            WHERE ProductID = @ProductID;",
        "            ",
        "            -- Validate quantity",
        "            IF @Quantity <= 0",
        "            BEGIN",
        "                SET @IsValid = 0;",
        "                SET @ErrorMessage = 'Invalid quantity for Product ID ' + CAST(@ProductID AS NVARCHAR(10)) + '. Must be greater than 0.';",
        "                SET @ErrorCode = 5003;",
        "                GOTO ErrorHandler;",
        "            END;",
        "            ",
        "            -- Check stock availability",
        "            IF @Quantity > @AvailableStock",
        "            BEGIN",
        "                -- Check if backorder is allowed",
        "                IF EXISTS (SELECT 1 FROM Products WHERE ProductID = @ProductID AND AllowBackorder = 1)",
        "                BEGIN",
        "                    SET @BackorderQuantity = @BackorderQuantity + (@Quantity - @AvailableStock);",
        "                    SET @WarningMessages = @WarningMessages + 'Product ' + CAST(@ProductID AS NVARCHAR(10)) + ' partially backordered. ';",
        "                    SET @WarningCode = 5001;",
        "                END",
        "                ELSE",
        "                BEGIN",
        "                    SET @IsValid = 0;",
        "                    SET @ErrorMessage = 'Insufficient stock for Product ID ' + CAST(@ProductID AS NVARCHAR(10)) + '. Available: ' + CAST(@AvailableStock AS NVARCHAR(10));",
        "                    SET @ErrorCode = 5004;",
        "                    GOTO ErrorHandler;",
        "                END;",
        "            END;",
        "            ",
        "            -- Calculate totals",
        "            SET @TotalWeight = @TotalWeight + (@ProductWeight * @Quantity);",
        "            SET @TotalVolume = @TotalVolume + (@ProductVolume * @Quantity);",
        "            ",
        "            -- Update cart with detailed information",
        "            UPDATE @Cart",
        "            SET ",
        "                UnitPrice = @UnitPrice,",
        "                LineTotal = @Quantity * @UnitPrice,",
        "                Weight = @ProductWeight,",
        "                Volume = @ProductVolume",
        "            WHERE RowNum = @CurrentItem;",
        "            ",
        "            SET @CurrentItem = @CurrentItem + 1;",
        "        END;",
        "        "
      ],
      "start_line": 377,
      "end_line": 471,
      "chunk_type": "loop_logic",
      "complexity_score": 42,
      "sql_operations": [
        "Logical:EXISTS",
        "Logical:NOT EXISTS",
        "Conversion:CAST",
        "UPDATE",
        "Aggregate:COUNT",
        "SELECT",
        "INSERT"
      ],
      "variables_declared": [],
      "variables_used": [
        "@ItemCount",
        "@ProductVolume",
        "@ErrorCode",
        "@AvailableStock",
        "@CartItems",
        "@IsValid",
        "@CurrentItem",
        "@UnitPrice",
        "@TotalWeight",
        "@TotalVolume",
        "@ProductID",
        "@BackorderQuantity",
        "@Quantity",
        "@WarningCode",
        "@WarningMessages",
        "@ErrorMessage",
        "@Cart",
        "@ProductWeight"
      ],
      "tables_accessed": [
        "OPENJSON",
        "PRODUCTS"
      ],
      "control_structures": [
        "WHILE",
        "END",
        "ELSE",
        "BEGIN",
        "FOR",
        "GOTO",
        "IF"
      ],
      "dependencies": [],
      "context_summary": "Performs logical:exists, logical:not exists, conversion:cast, update, aggregate:count, select, insert operations. Uses while, end, else, begin, for, goto, if logic. Follows loop logic",
      "business_functions": [],
      "sub_chunk_info": {
        "parent_block_type": "variable_declaration",
        "parent_block_start": 179,
        "parent_block_end": 1189,
        "sub_chunk_index": 9,
        "total_sub_chunks": 43,
        "subdivision_reason": "Size optimization"
      }
    },
    {
      "chunk_id": 9,
      "title": "Variable & Parameter Declarations (Conversion:CAST/SP_CALL:DBO.FN_ALLOCATEINVENTORYACROSSWAREHOUSES) (Part 11)",
      "lines": [
        "        -- =====================================================================================",
        "        ",
        "        IF @ProcessInventory = 1",
        "        BEGIN",
        "            -- Advanced inventory allocation across multiple warehouses",
        "            SET @CurrentItem = 1;",
        "            WHILE @CurrentItem <= @ItemCount",
        "            BEGIN",
        "                SELECT ",
        "                    @ProductID = ProductID,",
        "                    @Quantity = Quantity",
        "                FROM @Cart",
        "                WHERE RowNum = @CurrentItem;",
        "                ",
        "                -- Use complex inventory allocation function",
        "                INSERT INTO @InventoryAllocations",
        "                EXEC dbo.fn_AllocateInventoryAcrossWarehouses ",
        "                    @ProductID, ",
        "                    @Quantity, ",
        "                    @CustomerPriorityLevel, ",
        "                    @ShippingZoneID;",
        "                ",
        "                -- Check if full allocation was possible",
        "                DECLARE @AllocatedTotal INT = 0;",
        "                SELECT @AllocatedTotal = SUM(AllocatedQuantity)",
        "                FROM @InventoryAllocations",
        "                WHERE ProductID = @ProductID;",
        "                ",
        "                IF @AllocatedTotal < @Quantity",
        "                BEGIN",
        "                    SET @InventoryShortfall = @InventoryShortfall + (@Quantity - @AllocatedTotal);",
        "                    SET @WarningMessages = @WarningMessages + 'Partial inventory allocation for Product ' + CAST(@ProductID AS NVARCHAR(10)) + '. ';",
        "                END;",
        "                ",
        "                SET @CurrentItem = @CurrentItem + 1;",
        "            END;",
        "        END;",
        "        "
      ],
      "start_line": 474,
      "end_line": 511,
      "chunk_type": "variable_declaration",
      "complexity_score": 23,
      "sql_operations": [
        "Conversion:CAST",
        "SP_CALL:DBO.FN_ALLOCATEINVENTORYACROSSWAREHOUSES",
        "Aggregate:SUM",
        "EXEC",
        "SELECT",
        "Math:PI",
        "INSERT"
      ],
      "variables_declared": [
        "@ALLOCATEDTOTAL"
      ],
      "variables_used": [
        "@ItemCount",
        "@AllocatedTotal",
        "@CurrentItem",
        "@InventoryAllocations",
        "@ProcessInventory",
        "@ProductID",
        "@CustomerPriorityLevel",
        "@InventoryShortfall",
        "@Quantity",
        "@WarningMessages",
        "@Cart",
        "@ShippingZoneID"
      ],
      "tables_accessed": [],
      "control_structures": [
        "WHILE",
        "END",
        "BEGIN",
        "FOR",
        "IF"
      ],
      "dependencies": [],
      "context_summary": "Performs conversion:cast, sp_call:dbo.fn_allocateinventoryacrosswarehouses, aggregate:sum, exec, select, math:pi, insert operations. Uses while, end, begin, for, if logic. Follows loop logic",
      "business_functions": [],
      "sub_chunk_info": {
        "parent_block_type": "variable_declaration",
        "parent_block_start": 179,
        "parent_block_end": 1189,
        "sub_chunk_index": 11,
        "total_sub_chunks": 43,
        "subdivision_reason": "Size optimization"
      }
    },
    {
      "chunk_id": 10,
      "title": "Variable & Parameter Declarations (Conversion:ISNULL/Logical:NOT EXISTS) (Part 13)",
      "lines": [
        "        -- =====================================================================================",
        "        ",
        "        -- Calculate subtotal before promotions",
        "        SELECT @SubtotalAmount = SUM(LineTotal) FROM @Cart;",
        "        ",
        "        -- Process promotion code if provided",
        "        IF @PromoCode IS NOT NULL AND @PromoCode != ''",
        "        BEGIN",
        "            -- Validate promotion code",
        "            SELECT ",
        "                @PromoID = PromoID,",
        "                @DiscountPercentage = DiscountPercentage,",
        "                @MaxDiscount = MaxDiscountAmount,",
        "                @PromoStartDate = StartDate,",
        "                @PromoEndDate = EndDate,",
        "                @PromoMaxUsage = MaxUsageCount,",
        "                @IsPromoStackable = IsStackable",
        "            FROM Promotions",
        "            WHERE PromoCode = @PromoCode ",
        "              AND IsActive = 1;",
        "            ",
        "            IF @PromoID IS NULL",
        "            BEGIN",
        "                SET @IsValid = 0;",
        "                SET @ErrorMessage = 'Invalid or inactive promotion code: ' + @PromoCode;",
        "                SET @ErrorCode = 6001;",
        "                GOTO ErrorHandler;",
        "            END;",
        "            ",
        "            -- Check promotion date validity",
        "            IF @OrderDate < @PromoStartDate OR @OrderDate > @PromoEndDate",
        "            BEGIN",
        "                SET @IsValid = 0;",
        "                SET @ErrorMessage = 'Promotion code is not valid for the current date.';",
        "                SET @ErrorCode = 6002;",
        "                GOTO ErrorHandler;",
        "            END;",
        "            ",
        "            -- Check promotion usage limits",
        "            SELECT @PromoUsageCount = COUNT(*)",
        "            FROM Orders o",
        "            INNER JOIN OrderPromotions op ON o.OrderID = op.OrderID",
        "            WHERE op.PromoID = @PromoID;",
        "            ",
        "            IF @PromoMaxUsage > 0 AND @PromoUsageCount >= @PromoMaxUsage",
        "            BEGIN",
        "                SET @IsValid = 0;",
        "                SET @ErrorMessage = 'Promotion code has reached maximum usage limit.';",
        "                SET @ErrorCode = 6003;",
        "                GOTO ErrorHandler;",
        "            END;",
        "            ",
        "            -- Check customer-specific usage",
        "            SELECT @CustomerPromoUsage = COUNT(*)",
        "            FROM Orders o",
        "            INNER JOIN OrderPromotions op ON o.OrderID = op.OrderID",
        "            WHERE op.PromoID = @PromoID ",
        "              AND o.CustomerID = @CustomerID;",
        "            ",
        "            -- Customer usage validation (assuming max 1 per customer for this promo)",
        "            IF @CustomerPromoUsage > 0 AND NOT EXISTS (",
        "                SELECT 1 FROM Promotions ",
        "                WHERE PromoID = @PromoID ",
        "                  AND AllowMultipleUsagePerCustomer = 1",
        "            )",
        "            BEGIN",
        "                SET @IsValid = 0;",
        "                SET @ErrorMessage = 'Promotion code has already been used by this customer.';",
        "                SET @ErrorCode = 6004;",
        "                GOTO ErrorHandler;",
        "            END;",
        "            ",
        "            -- Calculate discount amount",
        "            SET @DiscountAmount = @SubtotalAmount * (@DiscountPercentage / 100.0);",
        "            IF @MaxDiscount IS NOT NULL AND @DiscountAmount > @MaxDiscount",
        "                SET @DiscountAmount = @MaxDiscount;",
        "            ",
        "            -- Record applied promotion",
        "            INSERT INTO @AppliedPromotions VALUES",
        "            (@PromoID, 'PROMO_CODE', @DiscountAmount, @DiscountPercentage, NULL, @IsPromoStackable);",
        "        END;",
        "        ",
        "        -- Apply automatic customer tier discounts",
        "        IF @CustomerTierID IS NOT NULL",
        "        BEGIN",
        "            DECLARE @TierDiscountPercentage DECIMAL(5,2) = 0;",
        "            SELECT @TierDiscountPercentage = DiscountPercentage",
        "            FROM CustomerTiers",
        "            WHERE TierID = @CustomerTierID;",
        "            ",
        "            IF @TierDiscountPercentage > 0",
        "            BEGIN",
        "                DECLARE @TierDiscount DECIMAL(18,2) = @SubtotalAmount * (@TierDiscountPercentage / 100.0);",
        "                SET @DiscountAmount = @DiscountAmount + @TierDiscount;",
        "                ",
        "                INSERT INTO @AppliedPromotions VALUES",
        "                (NULL, 'TIER_DISCOUNT', @TierDiscount, @TierDiscountPercentage, NULL, 1);",
        "            END;",
        "        END;",
        "        ",
        "        -- Apply loyalty points discount if applicable",
        "        IF @ProcessLoyalty = 1",
        "        BEGIN",
        "            SELECT @LoyaltyPoints = ISNULL(LoyaltyPoints, 0)",
        "            FROM Customers",
        "            WHERE CustomerID = @CustomerID;",
        "            ",
        "            -- Allow redemption of loyalty points (100 points = $1)",
        "            IF @LoyaltyPoints >= 100",
        "            BEGIN",
        "                DECLARE @MaxPointsRedemption INT = FLOOR(@SubtotalAmount); -- Max $1 per $1 of order",
        "                DECLARE @PointsToRedeem INT = CASE ",
        "                    WHEN @LoyaltyPoints > @MaxPointsRedemption * 100 ",
        "                    THEN @MaxPointsRedemption * 100 ",
        "                    ELSE (@LoyaltyPoints / 100) * 100 ",
        "                END;",
        "                ",
        "                IF @PointsToRedeem > 0",
        "                BEGIN",
        "                    DECLARE @PointsDiscount DECIMAL(18,2) = @PointsToRedeem / 100.0;",
        "                    SET @DiscountAmount = @DiscountAmount + @PointsDiscount;",
        "                    ",
        "                    INSERT INTO @AppliedPromotions VALUES",
        "                    (NULL, 'LOYALTY_POINTS', @PointsDiscount, 0, NULL, 1);",
        "                    ",
        "                    -- Update customer loyalty points",
        "                    UPDATE Customers ",
        "                    SET LoyaltyPoints = LoyaltyPoints - @PointsToRedeem",
        "                    WHERE CustomerID = @CustomerID;",
        "                END;",
        "            END;",
        "        END;",
        "        "
      ],
      "start_line": 514,
      "end_line": 646,
      "chunk_type": "variable_declaration",
      "complexity_score": 61,
      "sql_operations": [
        "Conversion:ISNULL",
        "Logical:NOT EXISTS",
        "UPDATE",
        "Aggregate:SUM",
        "Math:FLOOR",
        "Aggregate:COUNT",
        "SELECT",
        "INSERT"
      ],
      "variables_declared": [
        "@TIERDISCOUNT",
        "@POINTSDISCOUNT",
        "@MAXPOINTSREDEMPTION",
        "@POINTSTOREDEEM",
        "@TIERDISCOUNTPERCENTAGE"
      ],
      "variables_used": [
        "@AppliedPromotions",
        "@PromoCode",
        "@Cart",
        "@PromoEndDate",
        "@ErrorCode",
        "@DiscountAmount",
        "@IsValid",
        "@OrderDate",
        "@TierDiscount",
        "@TierDiscountPercentage",
        "@CustomerTierID",
        "@ErrorMessage",
        "@CustomerPromoUsage",
        "@PointsDiscount",
        "@CustomerID",
        "@MaxPointsRedemption",
        "@PromoUsageCount",
        "@PromoMaxUsage",
        "@LoyaltyPoints",
        "@PointsToRedeem",
        "@SubtotalAmount",
        "@PromoID",
        "@PromoStartDate",
        "@MaxDiscount",
        "@IsPromoStackable",
        "@ProcessLoyalty",
        "@DiscountPercentage"
      ],
      "tables_accessed": [
        "ORDERPROMOTIONS",
        "CUSTOMERTIERS",
        "ORDERS",
        "CUSTOMERS",
        "PROMOTIONS"
      ],
      "control_structures": [
        "END",
        "ELSE",
        "WHEN",
        "BEGIN",
        "CASE",
        "FOR",
        "GOTO",
        "IF"
      ],
      "dependencies": [],
      "context_summary": "Performs conversion:isnull, logical:not exists, update, aggregate:sum, math:floor, aggregate:count, select, insert operations. Uses end, else, when, begin, case, for, goto, if logic. Follows variable declaration",
      "business_functions": [],
      "sub_chunk_info": {
        "parent_block_type": "variable_declaration",
        "parent_block_start": 179,
        "parent_block_end": 1189,
        "sub_chunk_index": 13,
        "total_sub_chunks": 43,
        "subdivision_reason": "Size optimization"
      }
    },
    {
      "chunk_id": 11,
      "title": "Variable & Parameter Declarations (UPDATE/SELECT) (Part 15)",
      "lines": [
        "        -- =====================================================================================",
        "        ",
        "        -- Calculate tax for each product using complex tax function",
        "        SET @CurrentItem = 1;",
        "        WHILE @CurrentItem <= @ItemCount",
        "        BEGIN",
        "            SELECT ",
        "                @ProductID = ProductID,",
        "                @Quantity = Quantity,",
        "                @UnitPrice = UnitPrice",
        "            FROM @Cart",
        "            WHERE RowNum = @CurrentItem;",
        "            ",
        "            -- Use complex tax calculation function",
        "            DECLARE @ProductTaxRate DECIMAL(8,4);",
        "            SELECT @ProductTaxRate = dbo.fn_CalculateComplexTax(",
        "                @ProductID, ",
        "                @ShippingStateID, ",
        "                @CustomerTypeID, ",
        "                @UnitPrice * @Quantity, ",
        "                @OrderDate",
        "            );",
        "            ",
        "            DECLARE @LineTaxAmount DECIMAL(18,2) = (@UnitPrice * @Quantity) * @ProductTaxRate;",
        "            ",
        "            -- Apply tax exemption if customer is tax exempt",
        "            IF @IsTaxExempt = 1",
        "                SET @LineTaxAmount = 0;",
        "            ",
        "            SET @TaxAmount = @TaxAmount + @LineTaxAmount;",
        "            ",
        "            -- Update cart with tax information",
        "            UPDATE @Cart",
        "            SET ",
        "                TaxRate = @ProductTaxRate,",
        "                LineTaxAmount = @LineTaxAmount",
        "            WHERE RowNum = @CurrentItem;",
        "            ",
        "            -- Record tax calculation details",
        "            INSERT INTO @TaxCalculations VALUES",
        "            (@ProductID, @ProductTaxRate, @LineTaxAmount, 'SALES_TAX', @ShippingStateID);",
        "            ",
        "            SET @CurrentItem = @CurrentItem + 1;",
        "        END;",
        "        "
      ],
      "start_line": 649,
      "end_line": 693,
      "chunk_type": "variable_declaration",
      "complexity_score": 14,
      "sql_operations": [
        "UPDATE",
        "SELECT",
        "Math:PI",
        "INSERT",
        "UDF_CALL:DBO.FN_CALCULATECOMPLEXTAX"
      ],
      "variables_declared": [
        "@PRODUCTTAXRATE",
        "@LINETAXAMOUNT"
      ],
      "variables_used": [
        "@ItemCount",
        "@CustomerTypeID",
        "@CurrentItem",
        "@UnitPrice",
        "@ShippingStateID",
        "@OrderDate",
        "@LineTaxAmount",
        "@IsTaxExempt",
        "@ProductID",
        "@TaxAmount",
        "@Quantity",
        "@TaxCalculations",
        "@Cart",
        "@ProductTaxRate"
      ],
      "tables_accessed": [],
      "control_structures": [
        "WHILE",
        "END",
        "IF",
        "BEGIN"
      ],
      "dependencies": [],
      "context_summary": "Performs update, select, math:pi, insert, udf_call:dbo.fn_calculatecomplextax operations. Uses while, end, if, begin logic. Follows variable declaration",
      "business_functions": [],
      "sub_chunk_info": {
        "parent_block_type": "variable_declaration",
        "parent_block_start": 179,
        "parent_block_end": 1189,
        "sub_chunk_index": 15,
        "total_sub_chunks": 43,
        "subdivision_reason": "Size optimization"
      }
    },
    {
      "chunk_id": 12,
      "title": "Data Query & Retrieval (UDF_CALL:DBO.FN_CALCULATEDYNAMICSHIPPING/SELECT) (Part 17)",
      "lines": [
        "        -- =====================================================================================",
        "        ",
        "        -- Use complex shipping calculation function",
        "        SELECT @ShippingCost = dbo.fn_CalculateDynamicShipping(",
        "            @TotalWeight,",
        "            @TotalVolume, ",
        "            @ShippingDistance,",
        "            @ShippingMethodID,",
        "            @CustomerTypeID,",
        "            @SubtotalAmount,",
        "            @IsRushOrder,",
        "            @OrderDate",
        "        );",
        "        "
      ],
      "start_line": 696,
      "end_line": 709,
      "chunk_type": "data_retrieval",
      "complexity_score": 7,
      "sql_operations": [
        "UDF_CALL:DBO.FN_CALCULATEDYNAMICSHIPPING",
        "SELECT",
        "Math:PI"
      ],
      "variables_declared": [],
      "variables_used": [
        "@CustomerTypeID",
        "@SubtotalAmount",
        "@ShippingDistance",
        "@TotalWeight",
        "@TotalVolume",
        "@OrderDate",
        "@ShippingCost",
        "@ShippingMethodID",
        "@IsRushOrder"
      ],
      "tables_accessed": [],
      "control_structures": [],
      "dependencies": [],
      "context_summary": "Performs udf_call:dbo.fn_calculatedynamicshipping, select, math:pi operations. Follows variable declaration",
      "business_functions": [],
      "sub_chunk_info": {
        "parent_block_type": "variable_declaration",
        "parent_block_start": 179,
        "parent_block_end": 1189,
        "sub_chunk_index": 17,
        "total_sub_chunks": 43,
        "subdivision_reason": "Size optimization"
      }
    },
    {
      "chunk_id": 13,
      "title": "Conditional Logic & Branching (Conversion:CAST/Math:PI) (Part 19)",
      "lines": [
        "        -- =====================================================================================",
        "        ",
        "        IF @ProcessPayment = 1",
        "        BEGIN",
        "            -- Calculate payment processing fee",
        "            SET @ProcessingFee = (@SubtotalAmount + @TaxAmount + @ShippingCost) * (@PaymentFee / 100.0);",
        "            ",
        "            -- Minimum processing fee",
        "            IF @ProcessingFee < 0.30 AND @PaymentFee > 0",
        "                SET @ProcessingFee = 0.30;",
        "            ",
        "            -- Generate payment reference",
        "            SET @PaymentReferenceNumber = 'PAY' + FORMAT(GETDATE(), 'yyyyMMddHHmmss') + CAST(@CustomerID AS NVARCHAR(10));",
        "        END;",
        "        "
      ],
      "start_line": 712,
      "end_line": 726,
      "chunk_type": "conditional_logic",
      "complexity_score": 10,
      "sql_operations": [
        "Conversion:CAST",
        "Math:PI",
        "String:FORMAT",
        "System:GETDATE"
      ],
      "variables_declared": [],
      "variables_used": [
        "@SubtotalAmount",
        "@CustomerID",
        "@TaxAmount",
        "@PaymentFee",
        "@ProcessingFee",
        "@ShippingCost",
        "@ProcessPayment",
        "@PaymentReferenceNumber"
      ],
      "tables_accessed": [],
      "control_structures": [
        "IF",
        "END",
        "BEGIN"
      ],
      "dependencies": [],
      "context_summary": "Performs conversion:cast, math:pi, string:format, system:getdate operations. Uses if, end, begin logic. Follows data retrieval",
      "business_functions": [],
      "sub_chunk_info": {
        "parent_block_type": "variable_declaration",
        "parent_block_start": 179,
        "parent_block_end": 1189,
        "sub_chunk_index": 19,
        "total_sub_chunks": 43,
        "subdivision_reason": "Size optimization"
      }
    },
    {
      "chunk_id": 14,
      "title": "Conditional Logic & Branching (Math:PI) (Part 21)",
      "lines": [
        "        -- =====================================================================================",
        "        ",
        "        SET @FinalAmount = @SubtotalAmount - @DiscountAmount + @TaxAmount + @ShippingCost + @ProcessingFee;",
        "        SET @TotalAmount = @FinalAmount;",
        "        ",
        "        -- Validate final amount is positive",
        "        IF @FinalAmount <= 0",
        "        BEGIN",
        "            SET @IsValid = 0;",
        "            SET @ErrorMessage = 'Final order amount cannot be zero or negative.';",
        "            SET @ErrorCode = 7001;",
        "            GOTO ErrorHandler;",
        "        END;",
        "        "
      ],
      "start_line": 729,
      "end_line": 742,
      "chunk_type": "conditional_logic",
      "complexity_score": 5,
      "sql_operations": [
        "Math:PI"
      ],
      "variables_declared": [],
      "variables_used": [
        "@SubtotalAmount",
        "@ErrorCode",
        "@DiscountAmount",
        "@IsValid",
        "@TaxAmount",
        "@ProcessingFee",
        "@ShippingCost",
        "@TotalAmount",
        "@ErrorMessage",
        "@FinalAmount"
      ],
      "tables_accessed": [],
      "control_structures": [
        "IF",
        "END",
        "GOTO",
        "BEGIN"
      ],
      "dependencies": [],
      "context_summary": "Performs math:pi operations. Uses if, end, goto, begin logic. Follows conditional logic",
      "business_functions": [],
      "sub_chunk_info": {
        "parent_block_type": "variable_declaration",
        "parent_block_start": 179,
        "parent_block_end": 1189,
        "sub_chunk_index": 21,
        "total_sub_chunks": 43,
        "subdivision_reason": "Size optimization"
      }
    },
    {
      "chunk_id": 15,
      "title": "Conditional Logic & Branching (Conversion:ISNULL/SELECT) (Part 23)",
      "lines": [
        "        -- =====================================================================================",
        "        ",
        "        -- Create the main order record",
        "        INSERT INTO Orders (",
        "            CustomerID,",
        "            OrderDate,",
        "            ShippingAddressID,",
        "            PaymentMethodID,",
        "            ShippingMethodID,",
        "            SubtotalAmount,",
        "            DiscountAmount,",
        "            TaxAmount,",
        "            ShippingCost,",
        "            ProcessingFee,",
        "            FinalAmount,",
        "            OrderStatusID,",
        "            IsRushOrder,",
        "            TotalWeight,",
        "            TotalVolume,",
        "            EstimatedDeliveryDays,",
        "            CreatedDate,",
        "            CreatedBy",
        "        )",
        "        VALUES (",
        "            @CustomerID,",
        "            @OrderDate,",
        "            @ShippingAddressID,",
        "            @PaymentMethodID,",
        "            @ShippingMethodID,",
        "            @SubtotalAmount,",
        "            @DiscountAmount,",
        "            @TaxAmount,",
        "            @ShippingCost,",
        "            @ProcessingFee,",
        "            @FinalAmount,",
        "            @OrderStatusID,",
        "            @IsRushOrder,",
        "            @TotalWeight,",
        "            @TotalVolume,",
        "            @EstimatedDeliveryDays,",
        "            GETDATE(),",
        "            'SYSTEM'",
        "        );",
        "        ",
        "        SET @OrderID = SCOPE_IDENTITY();",
        "        ",
        "        -- Create order items",
        "        INSERT INTO OrderItems (",
        "            OrderID,",
        "            ProductID,",
        "            Quantity,",
        "            UnitPrice,",
        "            LineTotal,",
        "            TaxRate,",
        "            LineTaxAmount,",
        "            WarehouseID",
        "        )",
        "        SELECT ",
        "            @OrderID,",
        "            c.ProductID,",
        "            c.Quantity,",
        "            c.UnitPrice,",
        "            c.LineTotal,",
        "            c.TaxRate,",
        "            c.LineTaxAmount,",
        "            ISNULL(ia.WarehouseID, 1) -- Default warehouse if allocation failed",
        "        FROM @Cart c",
        "        LEFT JOIN @InventoryAllocations ia ON c.ProductID = ia.ProductID;",
        "        ",
        "        -- Create promotion applications",
        "        INSERT INTO OrderPromotions (OrderID, PromoID, DiscountAmount, DiscountType)",
        "        SELECT @OrderID, PromoID, DiscountAmount, PromoType",
        "        FROM @AppliedPromotions",
        "        WHERE PromoID IS NOT NULL;",
        "        "
      ],
      "start_line": 745,
      "end_line": 819,
      "chunk_type": "conditional_logic",
      "complexity_score": 16,
      "sql_operations": [
        "Conversion:ISNULL",
        "SELECT",
        "System:SCOPE_IDENTITY",
        "System:GETDATE",
        "Math:PI",
        "INSERT"
      ],
      "variables_declared": [],
      "variables_used": [
        "@ShippingAddressID",
        "@InventoryAllocations",
        "@PaymentMethodID",
        "@ProcessingFee",
        "@AppliedPromotions",
        "@OrderID",
        "@Cart",
        "@DiscountAmount",
        "@TotalWeight",
        "@OrderDate",
        "@TaxAmount",
        "@OrderStatusID",
        "@IsRushOrder",
        "@FinalAmount",
        "@EstimatedDeliveryDays",
        "@TotalVolume",
        "@CustomerID",
        "@ShippingMethodID",
        "@SubtotalAmount",
        "@ShippingCost"
      ],
      "tables_accessed": [
        "ORDERITEMS",
        "ORDERPROMOTIONS",
        "ORDERS"
      ],
      "control_structures": [
        "IF"
      ],
      "dependencies": [],
      "context_summary": "Performs conversion:isnull, select, system:scope_identity, system:getdate, math:pi, insert operations. Uses if logic. Follows conditional logic",
      "business_functions": [],
      "sub_chunk_info": {
        "parent_block_type": "variable_declaration",
        "parent_block_start": 179,
        "parent_block_end": 1189,
        "sub_chunk_index": 23,
        "total_sub_chunks": 43,
        "subdivision_reason": "Size optimization"
      }
    },
    {
      "chunk_id": 16,
      "title": "Conditional Logic & Branching (UPDATE/SELECT) (Part 25)",
      "lines": [
        "        -- =====================================================================================",
        "        ",
        "        IF @ProcessInventory = 1",
        "        BEGIN",
        "            -- Update inventory quantities",
        "            UPDATE p",
        "            SET p.StockQuantity = p.StockQuantity - c.Quantity,",
        "                p.ReservedQuantity = p.ReservedQuantity + c.Quantity",
        "            FROM Products p",
        "            INNER JOIN @Cart c ON p.ProductID = c.ProductID;",
        "            ",
        "            -- Create inventory reservations",
        "            INSERT INTO InventoryReservations (OrderID, ProductID, WarehouseID, ReservedQuantity, ReservationDate)",
        "            SELECT @OrderID, ProductID, WarehouseID, AllocatedQuantity, GETDATE()",
        "            FROM @InventoryAllocations;",
        "        END;",
        "        "
      ],
      "start_line": 822,
      "end_line": 838,
      "chunk_type": "conditional_logic",
      "complexity_score": 8,
      "sql_operations": [
        "UPDATE",
        "SELECT",
        "System:GETDATE",
        "INSERT"
      ],
      "variables_declared": [],
      "variables_used": [
        "@ProcessInventory",
        "@Cart",
        "@OrderID",
        "@InventoryAllocations"
      ],
      "tables_accessed": [
        "PRODUCTS",
        "P",
        "INVENTORYRESERVATIONS"
      ],
      "control_structures": [
        "IF",
        "END",
        "BEGIN"
      ],
      "dependencies": [],
      "context_summary": "Performs update, select, system:getdate, insert operations. Uses if, end, begin logic. Follows conditional logic",
      "business_functions": [],
      "sub_chunk_info": {
        "parent_block_type": "variable_declaration",
        "parent_block_start": 179,
        "parent_block_end": 1189,
        "sub_chunk_index": 25,
        "total_sub_chunks": 43,
        "subdivision_reason": "Size optimization"
      }
    },
    {
      "chunk_id": 17,
      "title": "Conditional Logic & Branching (UPDATE/System:GETDATE) (Part 27)",
      "lines": [
        "        -- =====================================================================================",
        "        ",
        "        IF @ProcessPayment = 1",
        "        BEGIN",
        "            -- Create payment record",
        "            INSERT INTO Payments (",
        "                OrderID,",
        "                PaymentMethodID,",
        "                PaymentAmount,",
        "                PaymentFee,",
        "                PaymentStatusID,",
        "                PaymentReferenceNumber,",
        "                PaymentDate,",
        "                IsPreAuthorization",
        "            )",
        "            VALUES (",
        "                @OrderID,",
        "                @PaymentMethodID,",
        "                @FinalAmount,",
        "                @ProcessingFee,",
        "                @PaymentStatusID,",
        "                @PaymentReferenceNumber,",
        "                GETDATE(),",
        "                @IsPaymentPreAuth",
        "            );",
        "            ",
        "            -- Update customer balance if using store credit",
        "            IF @PaymentTypeID = 5 -- Store Credit",
        "            BEGIN",
        "                UPDATE Customers",
        "                SET CurrentBalance = CurrentBalance + @FinalAmount",
        "                WHERE CustomerID = @CustomerID;",
        "            END;",
        "        END;",
        "        "
      ],
      "start_line": 841,
      "end_line": 875,
      "chunk_type": "conditional_logic",
      "complexity_score": 11,
      "sql_operations": [
        "UPDATE",
        "System:GETDATE",
        "INSERT"
      ],
      "variables_declared": [],
      "variables_used": [
        "@CustomerID",
        "@PaymentMethodID",
        "@PaymentTypeID",
        "@ProcessingFee",
        "@PaymentStatusID",
        "@IsPaymentPreAuth",
        "@ProcessPayment",
        "@PaymentReferenceNumber",
        "@OrderID",
        "@FinalAmount"
      ],
      "tables_accessed": [
        "PAYMENTS",
        "CUSTOMERS"
      ],
      "control_structures": [
        "IF",
        "END",
        "BEGIN"
      ],
      "dependencies": [],
      "context_summary": "Performs update, system:getdate, insert operations. Uses if, end, begin logic. Follows conditional logic",
      "business_functions": [],
      "sub_chunk_info": {
        "parent_block_type": "variable_declaration",
        "parent_block_start": 179,
        "parent_block_end": 1189,
        "sub_chunk_index": 27,
        "total_sub_chunks": 43,
        "subdivision_reason": "Size optimization"
      }
    },
    {
      "chunk_id": 18,
      "title": "Transaction Control (Conversion:ISNULL/UPDATE) (Part 29)",
      "lines": [
        "        -- =====================================================================================",
        "        ",
        "        IF @ProcessLoyalty = 1",
        "        BEGIN",
        "            -- Calculate loyalty points earned (1 point per dollar spent)",
        "            SET @LoyaltyPointsEarned = FLOOR(@SubtotalAmount);",
        "            ",
        "            -- Apply tier multiplier",
        "            SELECT @LoyaltyTierMultiplier = ISNULL(PointsMultiplier, 1.0)",
        "            FROM CustomerTiers",
        "            WHERE TierID = @CustomerTierID;",
        "            ",
        "            SET @LoyaltyPointsEarned = @LoyaltyPointsEarned * @LoyaltyTierMultiplier;",
        "            ",
        "            -- Update customer loyalty points",
        "            UPDATE Customers",
        "            SET LoyaltyPoints = LoyaltyPoints + @LoyaltyPointsEarned,",
        "                LastOrderDate = @OrderDate",
        "            WHERE CustomerID = @CustomerID;",
        "            ",
        "            -- Record loyalty transaction",
        "            INSERT INTO LoyaltyTransactions (CustomerID, OrderID, PointsEarned, TransactionDate, TransactionType)",
        "            VALUES (@CustomerID, @OrderID, @LoyaltyPointsEarned, GETDATE(), 'ORDER_PURCHASE');",
        "        END;",
        "        "
      ],
      "start_line": 878,
      "end_line": 902,
      "chunk_type": "transaction_control",
      "complexity_score": 10,
      "sql_operations": [
        "Conversion:ISNULL",
        "UPDATE",
        "Math:FLOOR",
        "System:GETDATE",
        "SELECT",
        "INSERT"
      ],
      "variables_declared": [],
      "variables_used": [
        "@SubtotalAmount",
        "@OrderDate",
        "@CustomerID",
        "@LoyaltyPointsEarned",
        "@LoyaltyTierMultiplier",
        "@OrderID",
        "@ProcessLoyalty",
        "@CustomerTierID"
      ],
      "tables_accessed": [
        "CUSTOMERS",
        "LOYALTYTRANSACTIONS",
        "CUSTOMERTIERS"
      ],
      "control_structures": [
        "IF",
        "END",
        "BEGIN"
      ],
      "dependencies": [],
      "context_summary": "Performs conversion:isnull, update, math:floor, system:getdate, select, insert operations. Uses if, end, begin logic. Follows conditional logic",
      "business_functions": [],
      "sub_chunk_info": {
        "parent_block_type": "variable_declaration",
        "parent_block_start": 179,
        "parent_block_end": 1189,
        "sub_chunk_index": 29,
        "total_sub_chunks": 43,
        "subdivision_reason": "Size optimization"
      }
    },
    {
      "chunk_id": 19,
      "title": "Variable & Parameter Declarations (UPDATE/Conversion:CAST) (Part 31)",
      "lines": [
        "        -- =====================================================================================",
        "        ",
        "        -- Check if customer qualifies for tier upgrade",
        "        DECLARE @NewCustomerTierID INT = @CustomerTierID;",
        "        ",
        "        -- Recalculate lifetime value including this order",
        "        SET @CustomerLifetimeValue = @CustomerLifetimeValue + @FinalAmount;",
        "        SET @CustomerOrderCount = @CustomerOrderCount + 1;",
        "        ",
        "        -- Determine new tier based on lifetime value and order count",
        "        SELECT TOP 1 @NewCustomerTierID = TierID",
        "        FROM CustomerTiers",
        "        WHERE MinimumLifetimeValue <= @CustomerLifetimeValue",
        "          AND MinimumOrderCount <= @CustomerOrderCount",
        "        ORDER BY TierID DESC;",
        "        ",
        "        -- Update customer tier if changed",
        "        IF @NewCustomerTierID != @CustomerTierID",
        "        BEGIN",
        "            UPDATE Customers",
        "            SET CustomerTierID = @NewCustomerTierID,",
        "                TierUpgradeDate = GETDATE()",
        "            WHERE CustomerID = @CustomerID;",
        "            ",
        "            -- Log tier upgrade",
        "            INSERT INTO CustomerLog (CustomerID, LogDate, LogMessage, LogType)",
        "            VALUES (@CustomerID, GETDATE(), ",
        "                   'Customer upgraded from tier ' + CAST(@CustomerTierID AS NVARCHAR(10)) + ",
        "                   ' to tier ' + CAST(@NewCustomerTierID AS NVARCHAR(10)), ",
        "                   'TIER_UPGRADE');",
        "            ",
        "            SET @WarningMessages = @WarningMessages + 'Customer tier upgraded. ';",
        "        END;",
        "        "
      ],
      "start_line": 905,
      "end_line": 938,
      "chunk_type": "variable_declaration",
      "complexity_score": 12,
      "sql_operations": [
        "UPDATE",
        "Conversion:CAST",
        "System:GETDATE",
        "Math:LOG",
        "SELECT",
        "INSERT"
      ],
      "variables_declared": [
        "@NEWCUSTOMERTIERID"
      ],
      "variables_used": [
        "@NewCustomerTierID",
        "@CustomerLifetimeValue",
        "@CustomerID",
        "@WarningMessages",
        "@CustomerOrderCount",
        "@CustomerTierID",
        "@FinalAmount"
      ],
      "tables_accessed": [
        "CUSTOMERS",
        "TIER",
        "CUSTOMERTIERS",
        "CUSTOMERLOG"
      ],
      "control_structures": [
        "IF",
        "END",
        "BEGIN"
      ],
      "dependencies": [],
      "context_summary": "Performs update, conversion:cast, system:getdate, math:log, select, insert operations. Uses if, end, begin logic. Follows transaction control",
      "business_functions": [],
      "sub_chunk_info": {
        "parent_block_type": "variable_declaration",
        "parent_block_start": 179,
        "parent_block_end": 1189,
        "sub_chunk_index": 31,
        "total_sub_chunks": 43,
        "subdivision_reason": "Size optimization"
      }
    },
    {
      "chunk_id": 20,
      "title": "Conditional Logic & Branching (System:GETDATE/Date:DATEADD) (Part 33)",
      "lines": [
        "        -- =====================================================================================",
        "        ",
        "        IF @ProcessRecommendations = 1",
        "        BEGIN",
        "            -- Generate product recommendations based on purchase history",
        "            INSERT INTO CustomerRecommendations (CustomerID, ProductID, RecommendationType, RecommendationScore, CreatedDate)",
        "            SELECT TOP 10",
        "                @CustomerID,",
        "                p.ProductID,",
        "                'FREQUENTLY_BOUGHT_TOGETHER',",
        "                COUNT(*) * 100 / @CustomerOrderCount,",
        "                GETDATE()",
        "            FROM Products p",
        "            INNER JOIN OrderItems oi ON p.ProductID = oi.ProductID",
        "            INNER JOIN Orders o ON oi.OrderID = o.OrderID",
        "            WHERE o.CustomerID = @CustomerID",
        "              AND p.ProductID NOT IN (SELECT ProductID FROM @Cart)",
        "              AND p.IsActive = 1",
        "            GROUP BY p.ProductID",
        "            ORDER BY COUNT(*) DESC;",
        "            ",
        "            -- Calculate cross-sell opportunities",
        "            SELECT @CrossSellOpportunities = COUNT(*)",
        "            FROM CustomerRecommendations",
        "            WHERE CustomerID = @CustomerID",
        "              AND CreatedDate >= DATEADD(DAY, -30, GETDATE());",
        "        END;",
        "        "
      ],
      "start_line": 941,
      "end_line": 968,
      "chunk_type": "conditional_logic",
      "complexity_score": 14,
      "sql_operations": [
        "System:GETDATE",
        "Date:DATEADD",
        "Aggregate:COUNT",
        "SELECT",
        "INSERT"
      ],
      "variables_declared": [],
      "variables_used": [
        "@CustomerID",
        "@CustomerOrderCount",
        "@ProcessRecommendations",
        "@CrossSellOpportunities",
        "@Cart"
      ],
      "tables_accessed": [
        "ORDERITEMS",
        "PRODUCTS",
        "CUSTOMERRECOMMENDATIONS",
        "ORDERS"
      ],
      "control_structures": [
        "IF",
        "END",
        "BEGIN"
      ],
      "dependencies": [],
      "context_summary": "Performs system:getdate, date:dateadd, aggregate:count, select, insert operations. Uses if, end, begin logic. Follows variable declaration",
      "business_functions": [],
      "sub_chunk_info": {
        "parent_block_type": "variable_declaration",
        "parent_block_start": 179,
        "parent_block_end": 1189,
        "sub_chunk_index": 33,
        "total_sub_chunks": 43,
        "subdivision_reason": "Size optimization"
      }
    },
    {
      "chunk_id": 21,
      "title": "Transaction Control (Date:DATEDIFF/System:SCOPE_IDENTITY) (Part 35)",
      "lines": [
        "        -- =====================================================================================",
        "        ",
        "        -- Create comprehensive transaction log",
        "        INSERT INTO TransactionLog (",
        "            OrderID,",
        "            CustomerID,",
        "            TransactionDate,",
        "            TransactionType,",
        "            Amount,",
        "            PaymentMethodID,",
        "            StatusID,",
        "            ReferenceNumber,",
        "            ProcessingTimeMs",
        "        )",
        "        VALUES (",
        "            @OrderID,",
        "            @CustomerID,",
        "            GETDATE(),",
        "            'ORDER_PLACED',",
        "            @FinalAmount,",
        "            @PaymentMethodID,",
        "            1, -- Success",
        "            @PaymentReferenceNumber,",
        "            DATEDIFF(MILLISECOND, @OrderProcessingStartTime, GETDATE())",
        "        );",
        "        ",
        "        SET @TransactionID = SCOPE_IDENTITY();",
        "        ",
        "        -- Create audit log entry",
        "        INSERT INTO AuditLog (",
        "            TableName,",
        "            RecordID,",
        "            Action,",
        "            OldValues,",
        "            NewValues,",
        "            ChangedBy,",
        "            ChangeDate,",
        "            AdditionalInfo",
        "        )",
        "        VALUES (",
        "            'Orders',",
        "            @OrderID,",
        "            'INSERT',",
        "            NULL,",
        "            'OrderID: ' + CAST(@OrderID AS NVARCHAR(10)) + ', Amount: ' + CAST(@FinalAmount AS NVARCHAR(20)),",
        "            'SYSTEM',",
        "            GETDATE(),",
        "            'Automated order processing - Customer: ' + CAST(@CustomerID AS NVARCHAR(10))",
        "        );",
        "        "
      ],
      "start_line": 971,
      "end_line": 1020,
      "chunk_type": "transaction_control",
      "complexity_score": 13,
      "sql_operations": [
        "Date:DATEDIFF",
        "System:SCOPE_IDENTITY",
        "Conversion:CAST",
        "System:GETDATE",
        "Math:LOG",
        "INSERT"
      ],
      "variables_declared": [],
      "variables_used": [
        "@CustomerID",
        "@PaymentMethodID",
        "@TransactionID",
        "@OrderProcessingStartTime",
        "@PaymentReferenceNumber",
        "@OrderID",
        "@FinalAmount"
      ],
      "tables_accessed": [
        "TRANSACTIONLOG",
        "AUDITLOG"
      ],
      "control_structures": [],
      "dependencies": [],
      "context_summary": "Performs date:datediff, system:scope_identity, conversion:cast, system:getdate, math:log, insert operations. Follows conditional logic",
      "business_functions": [],
      "sub_chunk_info": {
        "parent_block_type": "variable_declaration",
        "parent_block_start": 179,
        "parent_block_end": 1189,
        "sub_chunk_index": 35,
        "total_sub_chunks": 43,
        "subdivision_reason": "Size optimization"
      }
    },
    {
      "chunk_id": 22,
      "title": "Loop Processing & Iteration (Conversion:CAST/System:GETDATE) (Part 37)",
      "lines": [
        "        -- =====================================================================================",
        "        ",
        "        IF @ProcessNotifications = 1",
        "        BEGIN",
        "            -- Queue order confirmation email",
        "            INSERT INTO NotificationQueue (",
        "                CustomerID,",
        "                NotificationType,",
        "                Subject,",
        "                Message,",
        "                Priority,",
        "                ScheduledDate,",
        "                CreatedDate",
        "            )",
        "            VALUES (",
        "                @CustomerID,",
        "                'ORDER_CONFIRMATION',",
        "                'Order Confirmation #' + CAST(@OrderID AS NVARCHAR(10)),",
        "                'Thank you for your order. Order total: $' + CAST(@FinalAmount AS NVARCHAR(20)),",
        "                'HIGH',",
        "                GETDATE(),",
        "                GETDATE()",
        "            );",
        "            ",
        "            -- Queue SMS notification for high-value orders",
        "            IF @FinalAmount >= 500.00",
        "            BEGIN",
        "                INSERT INTO NotificationQueue (",
        "                    CustomerID,",
        "                    NotificationType,",
        "                    Subject,",
        "                    Message,",
        "                    Priority,",
        "                    ScheduledDate,",
        "                    CreatedDate",
        "                )",
        "                VALUES (",
        "                    @CustomerID,",
        "                    'SMS_NOTIFICATION',",
        "                    'High Value Order',",
        "                    'Order #' + CAST(@OrderID AS NVARCHAR(10)) + ' confirmed. Amount: $' + CAST(@FinalAmount AS NVARCHAR(20)),",
        "                    'HIGH',",
        "                    GETDATE(),",
        "                    GETDATE()",
        "                );",
        "            END;",
        "        END;",
        "        "
      ],
      "start_line": 1023,
      "end_line": 1070,
      "chunk_type": "loop_logic",
      "complexity_score": 18,
      "sql_operations": [
        "Conversion:CAST",
        "System:GETDATE",
        "INSERT"
      ],
      "variables_declared": [],
      "variables_used": [
        "@OrderID",
        "@FinalAmount",
        "@ProcessNotifications",
        "@CustomerID"
      ],
      "tables_accessed": [
        "NOTIFICATIONQUEUE"
      ],
      "control_structures": [
        "IF",
        "END",
        "FOR",
        "BEGIN"
      ],
      "dependencies": [],
      "context_summary": "Performs conversion:cast, system:getdate, insert operations. Uses if, end, for, begin logic. Follows transaction control",
      "business_functions": [],
      "sub_chunk_info": {
        "parent_block_type": "variable_declaration",
        "parent_block_start": 179,
        "parent_block_end": 1189,
        "sub_chunk_index": 37,
        "total_sub_chunks": 43,
        "subdivision_reason": "Size optimization"
      }
    },
    {
      "chunk_id": 23,
      "title": "Conditional Logic & Branching (Logical:EXISTS/Conversion:CAST) (Part 39)",
      "lines": [
        "        -- =====================================================================================",
        "        ",
        "        IF @ProcessReports = 1",
        "        BEGIN",
        "            -- Update daily sales summary",
        "            IF EXISTS (SELECT 1 FROM DailySalesSummary WHERE SalesDate = CAST(@OrderDate AS DATE))",
        "            BEGIN",
        "                UPDATE DailySalesSummary",
        "                SET ",
        "                    TotalOrders = TotalOrders + 1,",
        "                    TotalRevenue = TotalRevenue + @FinalAmount,",
        "                    TotalTax = TotalTax + @TaxAmount,",
        "                    TotalShipping = TotalShipping + @ShippingCost,",
        "                    TotalDiscounts = TotalDiscounts + @DiscountAmount,",
        "                    AverageOrderValue = TotalRevenue / TotalOrders,",
        "                    LastUpdated = GETDATE()",
        "                WHERE SalesDate = CAST(@OrderDate AS DATE);",
        "            END",
        "            ELSE",
        "            BEGIN",
        "                INSERT INTO DailySalesSummary (",
        "                    SalesDate, TotalOrders, TotalRevenue, TotalTax, ",
        "                    TotalShipping, TotalDiscounts, AverageOrderValue, LastUpdated",
        "                )",
        "                VALUES (",
        "                    CAST(@OrderDate AS DATE), 1, @FinalAmount, @TaxAmount,",
        "                    @ShippingCost, @DiscountAmount, @FinalAmount, GETDATE()",
        "                );",
        "            END;",
        "            ",
        "            -- Update customer analytics",
        "            UPDATE CustomerAnalytics",
        "            SET ",
        "                TotalOrders = TotalOrders + 1,",
        "                TotalSpent = TotalSpent + @FinalAmount,",
        "                AverageOrderValue = TotalSpent / TotalOrders,",
        "                LastOrderDate = @OrderDate,",
        "                LastUpdated = GETDATE()",
        "            WHERE CustomerID = @CustomerID;",
        "            ",
        "            -- Insert if customer analytics record doesn't exist",
        "            IF @@ROWCOUNT = 0",
        "            BEGIN",
        "                INSERT INTO CustomerAnalytics (",
        "                    CustomerID, TotalOrders, TotalSpent, AverageOrderValue,",
        "                    FirstOrderDate, LastOrderDate, LastUpdated",
        "                )",
        "                VALUES (",
        "                    @CustomerID, 1, @FinalAmount, @FinalAmount,",
        "                    @OrderDate, @OrderDate, GETDATE()",
        "                );",
        "            END;",
        "        END;",
        "        "
      ],
      "start_line": 1073,
      "end_line": 1126,
      "chunk_type": "conditional_logic",
      "complexity_score": 34,
      "sql_operations": [
        "Logical:EXISTS",
        "Conversion:CAST",
        "UPDATE",
        "System:@@ROWCOUNT",
        "System:GETDATE",
        "SELECT",
        "Math:PI",
        "INSERT"
      ],
      "variables_declared": [],
      "variables_used": [
        "@DiscountAmount",
        "@OrderDate",
        "@CustomerID",
        "@TaxAmount",
        "@ProcessReports",
        "@ShippingCost",
        "@FinalAmount",
        "@ROWCOUNT"
      ],
      "tables_accessed": [
        "CUSTOMERANALYTICS",
        "DAILYSALESSUMMARY"
      ],
      "control_structures": [
        "IF",
        "END",
        "ELSE",
        "BEGIN"
      ],
      "dependencies": [],
      "context_summary": "Performs logical:exists, conversion:cast, update, system:@@rowcount, system:getdate, select, math:pi, insert operations. Uses if, end, else, begin logic. Follows loop logic",
      "business_functions": [],
      "sub_chunk_info": {
        "parent_block_type": "variable_declaration",
        "parent_block_start": 179,
        "parent_block_end": 1189,
        "sub_chunk_index": 39,
        "total_sub_chunks": 43,
        "subdivision_reason": "Size optimization"
      }
    },
    {
      "chunk_id": 24,
      "title": "Transaction Control (Conversion:CAST/String:LEN) (Part 41)",
      "lines": [
        "        -- =====================================================================================",
        "        ",
        "        -- Commit the transaction",
        "        COMMIT TRANSACTION;",
        "        ",
        "        -- Set success message",
        "        SET @ErrorMessage = 'Order processed successfully. Order ID: ' + CAST(@OrderID AS NVARCHAR(10));",
        "        ",
        "        -- Final cleanup and summary",
        "        IF LEN(@WarningMessages) > 0",
        "        BEGIN",
        "            SET @WarningMessages = 'Warnings: ' + @WarningMessages;",
        "        END;",
        "        ",
        "        RETURN 0; -- Success",
        "        ",
        "    END TRY",
        "    BEGIN CATCH"
      ],
      "start_line": 1129,
      "end_line": 1146,
      "chunk_type": "transaction_control",
      "complexity_score": 10,
      "sql_operations": [
        "Conversion:CAST",
        "String:LEN"
      ],
      "variables_declared": [],
      "variables_used": [
        "@ErrorMessage",
        "@OrderID",
        "@WarningMessages"
      ],
      "tables_accessed": [],
      "control_structures": [
        "RETURN",
        "END",
        "TRY",
        "BEGIN",
        "CATCH",
        "IF"
      ],
      "dependencies": [],
      "context_summary": "Performs conversion:cast, string:len operations. Uses return, end, try, begin, catch, if logic. Follows conditional logic",
      "business_functions": [],
      "sub_chunk_info": {
        "parent_block_type": "variable_declaration",
        "parent_block_start": 179,
        "parent_block_end": 1189,
        "sub_chunk_index": 41,
        "total_sub_chunks": 43,
        "subdivision_reason": "Size optimization"
      }
    },
    {
      "chunk_id": 25,
      "title": "Transaction Control (Conversion:CAST/System:GETDATE) (Part 43)",
      "lines": [
        "        -- =====================================================================================",
        "        ",
        "        -- Rollback transaction on any error",
        "        IF @@TRANCOUNT > 0",
        "            ROLLBACK TRANSACTION;",
        "            ",
        "        SET @IsValid = 0;",
        "        SET @ErrorCode = ERROR_NUMBER();",
        "        SET @ErrorMessage = 'Error processing order: ' + ERROR_MESSAGE() + ",
        "                           ' (Error ' + CAST(@ErrorCode AS NVARCHAR(10)) + ",
        "                           ' at Line ' + CAST(ERROR_LINE() AS NVARCHAR(10)) + ')';",
        "        ",
        "        -- Log the error",
        "        INSERT INTO ErrorLog (",
        "            ErrorCode,",
        "            ErrorMessage,",
        "            ErrorLine,",
        "            ErrorProcedure,",
        "            ErrorSeverity,",
        "            ErrorState,",
        "            LogDate,",
        "            CustomerID,",
        "            OrderID,",
        "            AdditionalInfo",
        "        )",
        "        VALUES (",
        "            @ErrorCode,",
        "            @ErrorMessage,",
        "            ERROR_LINE(),",
        "            ERROR_PROCEDURE(),",
        "            ERROR_SEVERITY(),",
        "            ERROR_STATE(),",
        "            GETDATE(),",
        "            @CustomerID,",
        "            @OrderID,",
        "            'Automated error capture during order processing'",
        "        );",
        "        ",
        "        GOTO ErrorHandler;",
        "        ",
        "    END CATCH;"
      ],
      "start_line": 1149,
      "end_line": 1189,
      "chunk_type": "transaction_control",
      "complexity_score": 9,
      "sql_operations": [
        "Conversion:CAST",
        "System:GETDATE",
        "Math:LOG",
        "System:@@TRANCOUNT",
        "INSERT"
      ],
      "variables_declared": [],
      "variables_used": [
        "@ErrorCode",
        "@IsValid",
        "@CustomerID",
        "@TRANCOUNT",
        "@OrderID",
        "@ErrorMessage"
      ],
      "tables_accessed": [
        "ERRORLOG"
      ],
      "control_structures": [
        "IF",
        "END",
        "CATCH",
        "GOTO"
      ],
      "dependencies": [],
      "context_summary": "Performs conversion:cast, system:getdate, math:log, system:@@trancount, insert operations. Uses if, end, catch, goto logic. Follows transaction control",
      "business_functions": [],
      "sub_chunk_info": {
        "parent_block_type": "variable_declaration",
        "parent_block_start": 179,
        "parent_block_end": 1189,
        "sub_chunk_index": 43,
        "total_sub_chunks": 43,
        "subdivision_reason": "Size optimization"
      }
    },
    {
      "chunk_id": 26,
      "title": "General Business Logic",
      "lines": [
        "    ",
        "    -- =====================================================================================",
        "    -- CUSTOM ERROR HANDLER",
        "    -- =====================================================================================",
        "    ",
        "    ErrorHandler:"
      ],
      "start_line": 1190,
      "end_line": 1195,
      "chunk_type": "general_logic",
      "complexity_score": 0,
      "sql_operations": [],
      "variables_declared": [],
      "variables_used": [],
      "tables_accessed": [],
      "control_structures": [],
      "dependencies": [],
      "context_summary": "Follows transaction control",
      "business_functions": []
    },
    {
      "chunk_id": 27,
      "title": "Transaction Control (Math:PI/System:@@TRANCOUNT)",
      "lines": [
        "    IF @IsValid = 0",
        "    BEGIN",
        "        -- Additional error handling for specific error codes",
        "        IF @ErrorCode BETWEEN 1000 AND 1999 -- Input validation errors",
        "        BEGIN",
        "            SET @ErrorMessage = '[INPUT_ERROR] ' + @ErrorMessage;",
        "        END",
        "        ELSE IF @ErrorCode BETWEEN 2000 AND 2999 -- Customer validation errors",
        "        BEGIN",
        "            SET @ErrorMessage = '[CUSTOMER_ERROR] ' + @ErrorMessage;",
        "        END",
        "        ELSE IF @ErrorCode BETWEEN 3000 AND 3999 -- Shipping/Address errors",
        "        BEGIN",
        "            SET @ErrorMessage = '[SHIPPING_ERROR] ' + @ErrorMessage;",
        "        END",
        "        ELSE IF @ErrorCode BETWEEN 4000 AND 4999 -- Payment errors",
        "        BEGIN",
        "            SET @ErrorMessage = '[PAYMENT_ERROR] ' + @ErrorMessage;",
        "        END",
        "        ELSE IF @ErrorCode BETWEEN 5000 AND 5999 -- Product/Cart errors",
        "        BEGIN",
        "            SET @ErrorMessage = '[PRODUCT_ERROR] ' + @ErrorMessage;",
        "        END",
        "        ELSE IF @ErrorCode BETWEEN 6000 AND 6999 -- Promotion errors",
        "        BEGIN",
        "            SET @ErrorMessage = '[PROMOTION_ERROR] ' + @ErrorMessage;",
        "        END",
        "        ELSE IF @ErrorCode BETWEEN 7000 AND 7999 -- Calculation errors",
        "        BEGIN",
        "            SET @ErrorMessage = '[CALCULATION_ERROR] ' + @ErrorMessage;",
        "        END;",
        "        ",
        "        -- Ensure transaction is rolled back",
        "        IF @@TRANCOUNT > 0",
        "            ROLLBACK TRANSACTION;",
        "        ",
        "        -- Set output parameters for error state",
        "        SET @OrderID = NULL;",
        "        SET @TotalAmount = 0;",
        "        ",
        "        RETURN -1; -- Error",
        "    END;"
      ],
      "start_line": 1196,
      "end_line": 1237,
      "chunk_type": "transaction_control",
      "complexity_score": 38,
      "sql_operations": [
        "Math:PI",
        "System:@@TRANCOUNT"
      ],
      "variables_declared": [],
      "variables_used": [
        "@ErrorCode",
        "@IsValid",
        "@TRANCOUNT",
        "@OrderID",
        "@TotalAmount",
        "@ErrorMessage"
      ],
      "tables_accessed": [],
      "control_structures": [
        "RETURN",
        "END",
        "ELSE",
        "BEGIN",
        "IF"
      ],
      "dependencies": [],
      "context_summary": "Performs math:pi, system:@@trancount operations. Uses return, end, else, begin, if logic. Follows general logic",
      "business_functions": []
    },
    {
      "chunk_id": 28,
      "title": "General Business Logic (RETURN/END)",
      "lines": [
        "    ",
        "    RETURN 0; -- Success",
        "END;",
        "GO "
      ],
      "start_line": 1238,
      "end_line": 1241,
      "chunk_type": "general_logic",
      "complexity_score": 0,
      "sql_operations": [],
      "variables_declared": [],
      "variables_used": [],
      "tables_accessed": [],
      "control_structures": [
        "RETURN",
        "END"
      ],
      "dependencies": [],
      "context_summary": "Uses return, end logic. Follows transaction control",
      "business_functions": []
    }
  ]
}